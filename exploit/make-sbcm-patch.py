from multiprocessing.pool import ThreadPool, TimeoutError
from sys import argv
import os, csv, time, subprocess, hashlib

devkitppc = os.environ.get("DEVKITPPC")
path_cc = os.path.join(devkitppc, "bin", "powerpc-eabi-gcc")
path_objcopy = os.path.join(devkitppc, "bin", "powerpc-eabi-objcopy")

extra_build_flags = []

def build(game):
    print(game["Title"])
    flags = []
    flags.append("-D" + game["Title"] + "=1")

    title_str = game["Title"]
    # pad to 9 bytes
    if len(title_str) == 7:
        title_str += "\\0\\0"

    flags.append("-DPAYLOAD=\"" + title_str + "\"")
    stage1_flags = flags.copy()

    for key, value in game.items():
        if key != "Title":
            flags.append("-D" + key + "=" + value)
            stage1_flags.append("-D" + key + "=" + value)
        if key.startswith("ADDRESS_"):
            flags.append("-Wl,-defsym," + key[len("ADDRESS_"):] + "=" + value)

    flags += extra_build_flags
    stage1_flags += extra_build_flags
    stage1_flags += ["-DSTAGE1_SBCM=1"]

    ccflags = "-g -Os -std=c++20 -fno-rtti -ffreestanding -nodefaultlibs -nostdlib -fno-unwind-tables -fno-exceptions -fmerge-all-constants -ffunction-sections -fdata-sections -fshort-enums -nodefaultlibs -nostdlib -lgcc -Wl,--gc-sections -n "
    ccflags += "-I" + os.path.join("..", "include")

    out_path = os.path.join("build", game["TitleID"])
    subprocess.run([path_cc, os.path.join("..", "stage1", "wwfcStage1.cpp")] + ccflags.split(" ") + ["-S", "-o" + out_path + "-stage1.s"] + stage1_flags).check_returncode()
    subprocess.run([path_cc, "-o" + out_path + ".o", "-xassembler-with-cpp", "wwfcSbcmPacket.s", "-xassembler", out_path + "-stage1.s", "-mregnames", "-I" + os.path.join("..", "include"), "-Tsbcm-packet.ld", "-Ttext=" + game["ADDRESS_GTI2_BUFFER"], "-nodefaultlibs", "-nostdlib", "-n", "-lgcc"] + flags).check_returncode()
    subprocess.run([path_objcopy, out_path + ".o", os.path.join("sbcm", "payload." + game["TitleID"] + ".bin"), "-O", "binary"]).check_returncode()

if __name__ == "__main__":
    try:
        os.mkdir("build")
    except:
        pass

    try:
        os.mkdir("sbcm")
    except:
        pass

    game_list = []
    game_ids = {"RMCP": "RMCPD00", "RMCE": "RMCED00", "RMCJ": "RMCJD00", "RMCK": "RMCKD00"}

    with open(os.path.join("..", "gamedefs.csv")) as csv_file:
        reader = csv.DictReader(csv_file, delimiter=",", dialect="excel")
        for game in reader:
            game_list.append(game)

    pool_count = -1
    title_id = ""

    for i in range(len(argv)):
        if i == 0:
            continue

        if argv[i].startswith("-j"):
            if len(argv[i]) == 2:
                pool_count = 0
            else:
                pool_count = int(argv[i][2:])
        elif argv[i].startswith("-g") or argv[i].startswith("-t"):
            title_id = argv[i][2:]
        elif argv[i].startswith("-D"):
            extra_build_flags.append(argv[i])

    if title_id != "":
        for key in game_ids.keys():
            if key.startswith(title_id) == False:
                del game_ids[key]
            
        if game_ids == {}:
            print("No title for " + title_id)

    map_game_list = []
    for key in game_ids:
        for game in game_list:
            if game["Title"] == game_ids[key]:
                game["TitleID"] = key
                map_game_list.append(game)
                break
        

    if pool_count == -1:
        for game in map_game_list:
            build(game)
        exit()

    if pool_count == 0:
        pool = ThreadPool()
    else:
        pool = ThreadPool(pool_count)
    pool.map(build, map_game_list)
    pool.close()

